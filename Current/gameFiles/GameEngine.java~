package gameFiles;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.geom.*;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;

public class GameEngine extends JPanel
{
  public static final int MAX_SPAWN = 20;
  public final int UPDATE_RATE = 60;
  public static final String TITLE = "Mike's 2d Physics Engine greatly modified by Jason using code written by Hock-Chuan Chua";
  public static ArrayList<Ball> living = new ArrayList<Ball>();
  public static ArrayList<ButtonObstacle> buttons = new ArrayList<ButtonObstacle>();
  public static ArrayList<ObstacleLine> lines = new ArrayList<ObstacleLine>();
  public static ArrayList<PseudoPaddle> pseudoPaddles = new ArrayList<PseudoPaddle>();
  public static boolean isRunning = true;
  private int fps;
  public static boolean paused = false;
  public static boolean terminated = false;
  public static boolean open = false;
  public boolean started = false;
  public static int score = 0;
  public static int layout;
  public static int difficulty = 0;
  
  
  public MoveEngine moveEngine;
  public  HighScoreManager highscoreManager;
  
  public static final int EASY_LAYOUT = 0;
  public static final int MEDIUM_LAYOUT = 1;
  public static final int HARD_LAYOUT = 2;
  
  public static final int EASY = 0;
  public static final int MEDIUM= 1;
  public static final int HARD = 2;
  
  public GameEngine ()
  {
    // Create canvas for painting...
    //setIgnoreRepaint(true);
    setSize(500, 500);
    setBackground (Color.WHITE);
    // Add the canvas, and display.
    setVisible(true);
    // Set up the BufferStrategy for double buffering.
    setDoubleBuffered(true);
    moveEngine = new MoveEngine(this);
    // Objects needed for rendering...
    initialize();
    highscoreManager = new HighScoreManager();
  }
  
  public void initialize ()
  {
    //The ball
    living.add (new Ball (16,16,0,0));
    
    //walls
    lines.add (new ObstacleLine (0,0,0,550,Color.BLACK));
    lines.add (new ObstacleLine (396,0,396,550,Color.BLACK));
    lines.add (new ObstacleLine (0,0,400,0,Color.BLACK));
    
    //slopes to the paddle
    lines.add (new ObstacleLine (0,400,100,500,Color.BLACK));
    lines.add (new ObstacleLine (400,400,300,500,Color.BLACK));
    
    //The paddle
    pseudoPaddles.add (new PseudoPaddle (150,500,100,Color.BLACK)); 
  }
  
  public void reset ()
  {
    living.clear ();
    buttons.clear();
    lines.clear();
    pseudoPaddles.clear();
  }
  
  public void easyLayout ()
  {
    
    //Button
    buttons.add (new ButtonObstacle (50,200,15,1.1f,Color.GREEN));
    buttons.add (new ButtonObstacle (150,200,15,1.1f,Color.RED));
    buttons.add (new ButtonObstacle (250,200,15,1.1f,Color.BLUE));
    buttons.add (new ButtonObstacle (350,200,15,1.1f,Color.MAGENTA));
    layout = EASY_LAYOUT;
    
  }
  
  public void mediumLayout ()
  {
    //   Center obstacle
    lines.add (new BumperObstacleLine (100,200,300,200));
    lines.add (new ObstacleLine (100,200,200,300,Color.BLACK));
    lines.add (new ObstacleLine (200,300,300,200,Color.BLACK));
    layout = MEDIUM_LAYOUT;
  }
  
  public void hardLayout ()
  {
    buttons.add (new ButtonObstacle (200,200,30,1.1f,Color.CYAN));
    lines.add (new BumperObstacleLine (200,150,250,200));
    lines.add (new BumperObstacleLine (200,150,150,200));
    layout = HARD_LAYOUT;
  }
  
  public void setGameLayout (int layout)
  {
    reset ();
    initialize ();
    switch (layout){
      case EASY_LAYOUT : easyLayout();
      break;
      case MEDIUM_LAYOUT : mediumLayout ();
      break;
      case HARD_LAYOUT : hardLayout ();
      break;
    }      
  }
  
  public static String getLayoutAsString ()
  {
    switch (layout){
      case EASY_LAYOUT : return "Level 1";
      case MEDIUM_LAYOUT : return "Level 2";
      case HARD_LAYOUT : return "Level 3";
      default :return "Can't be found";
    }  
  }
  
  public void setGameDifficulty (int difficulty)
  {
    switch (difficulty){
      case EASY : this.difficulty = EASY;
      break;
      case MEDIUM: this.difficulty = MEDIUM;
      break;
      case HARD : this.difficulty = HARD;
      break;
    }      
  }
  
  public static String getDifficultyAsString ()
  {
    switch (difficulty){
      case EASY : return "Easy";
      case MEDIUM : return "Medium";
      case HARD : return "Hard";
      default :return "Can't be found";
    }  
  }
  public void gamerun ()
  {
    
    //moveEngine.start();
//    Thread makeBall = new MakeBall (this);
//    makeBall.start();
    fps = 0;
    int frames = 0;
    long totalTime = 0;
    long curTime = System.currentTimeMillis();
    long lastTime = curTime;
    isRunning = true;
    // Start the loop.
    while (isRunning) {
      // Calculations for FPS.
      long beginTimeMillis, timeTakenMillis, timeLeftMillis;
      beginTimeMillis = System.currentTimeMillis();
      
      lastTime = curTime;
      curTime = System.currentTimeMillis();
      totalTime += curTime - lastTime;
      
      if (totalTime > 1000) {
        totalTime -= 1000;
        fps = frames;
        frames = 0;
      }
      ++frames;
      
      if (terminated){       
        break;
      }
      if (!paused && started){
        moveEngine.run();
      }
      else if (paused == true){
        pauseGame ();
      }
      repaint ();
      //If the player dies
      if (living.get(0).getY() > 590){
        isRunning = false;
      }        
      timeTakenMillis = System.currentTimeMillis() - beginTimeMillis;
      timeLeftMillis = 1000L / UPDATE_RATE - timeTakenMillis;
      if (timeLeftMillis < 5) timeLeftMillis = 5; // Set a minimum
      
      // Delay and give other thread a chance
      try {
        Thread.sleep(timeLeftMillis);
        
      } catch (InterruptedException e) {}
      
    }
    living.get (0).updatePos (16,16);
  }
  
  //add color
  //add override tag
  public void paintComponent (Graphics g)
  {
    super.paintComponent (g);
    g.drawString ("Score: " + Integer.toString (score),40,20);
    for (int i = 0; i < living.size(); i++) 
    {
      Ball s = living.get(i);
      g.fillOval ((int)(s.getX() - s.getRadius()),(int)(s.getY() - s.getRadius()),(int)(s.getRadius() * 2),(int)(s.getRadius() * 2));
    }
    for (PseudoPaddle p : pseudoPaddles){
      g.drawLine ((int)p.getX(),(int)p.getY(),(int)p.getX2(),(int)p.getY2());}
    for (ObstacleLine l :lines){
      g.setColor (l.getColour ());
      g.drawLine ((int)l.getX(),(int)l.getY(),(int)l.getX2(),(int)l.getY2());}
    for (ButtonObstacle b : buttons){
      g.setColor (b.getColour());
      g.fillOval ((int)(b.getX() - b.getRadius()),(int)(b.getY() - b.getRadius()),(int)(b.getRadius() * 2),(int)(b.getRadius() * 2));
    }
    if (isPaused())
    {
      g.drawString ("Paused game", 40,40);
    }
    
    if (isRunning == false)
    {
      g.setColor (Color.RED);
      g.drawLine (0,0,400,550);
      g.drawLine (0,550,400,0);
    }
    Toolkit.getDefaultToolkit().sync();
    g.dispose ();
  }
  
  public static boolean allDead()
  {
    if (living.size() < 1) return true;
    return false;
  }
  
  public boolean isPaused ()
  {
    return paused; 
  }
  
  public void setTerminated (boolean state)
  {
    terminated = state;
  }
  
  public static boolean isTerminated ()
  {
    return terminated;
  }
  
  public void setStarted (boolean state)
  {
    started = state;
  }
  
  public void pause ()
  {
    if (isRunning)
    {
      paused = true; 
    }
  }
  
  
  public void pauseGame ()
  {
    if (open == false)
    {
      PauseWindow p = new PauseWindow ();
      
      open = true;
    }
  }
  public static void increaseScore (int increment)
  {
    score += increment;
  }
  
  public int getScore ()
  {
    return score;
  }
  
  public void resetGame ()
  {
    terminated = false;
    score = 0;
  }
  
//The super secret cheat to get a highscore
  private ObstacleLine cheat = new ObstacleLine (0,510,400,510,Color.BLACK);
  public void keyPressed (KeyEvent e)
  {
    //For some strange reason the repaint method stops refrshing once this is pressed
    int key = e.getKeyCode ();
    switch (key){
      case KeyEvent.VK_P : 
        pause();
        break;
      case KeyEvent.VK_X : 
        if (!lines.contains (cheat))
        lines.add (cheat);
        break;
      case KeyEvent.VK_Z :
        lines.remove (cheat);
        break;
      case KeyEvent.VK_ENTER :
        terminated = true;      
        break;
      case KeyEvent.VK_SPACE :
        started = true;
        break;
    }
    for (PseudoPaddle p : pseudoPaddles)
      p.keyPressed (e);
  }

}